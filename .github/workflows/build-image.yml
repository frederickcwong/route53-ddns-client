# Automate building of the docker image
# image is built when:
#   - a tag is pushed to github. it will use the tag's commit id to perform a build
#   - the workflow is manually triggered. it will found the latest tag by traversing the commit
#     id (or branch name) provided by the trigger. it will use the found tag to perform a build
#   - run by github scheduler. it will always look for the latest tag in the release (main)
#     branch and perform a build. it will only perform a build if:
#     - the base image is outdated, and
#     - the latest tag found in the release branch is in semver format
#
# IMPORTANT - avoid using special characters including single and double quotes for tag/branch/repo
# names. it might break the bash code. The workaround (but not bullet proof) is to put all
# gh action contexts (secrets, github, job and step outputs, etc) into environment variable at
# the beginning of a job / step. This workaround avoid the directly subsititution of text to the
# shell scripts before it is executed. If there are quote characters in ${{github.ref_name}},
# the quotes will cause the shell script to break. e.g. if ${{github.ref_name}} is 'abc"def' with
# a single double-quote in the text, the reference "${{github.ref_name}}" will be injected with
# the text abc"def and become "abc"def". The shell will interpret "def" as a command and error out.

name: Build Docker Image
on:
  push:
    tags:
      - "**"
  repository_dispatch:
    types: [build]
  workflow_dispatch:
    inputs:
      ref:
        description: Branch name or commit hash (branch selection above is ignored)
        required: true
        type: string
        default: main
      latest:
        description: Update "latest" tag?
        required: true
        type: boolean
        default: false

jobs:
  # determine if the base image is outdated
  check-base-image:
    runs-on: ubuntu-latest
    outputs:
      need-update: ${{steps.check.outputs.needs-updating}}
    steps:
      - id: check
        uses: lucacome/docker-image-update-checker@v1
        with:
          base-image: library/alpine:latest
          image: frederickwong/route53-ddns-client:latest
          platforms: linux/amd64

  # get the sha and tag from github context (push tag action)
  get-push-params:
    runs-on: ubuntu-latest
    outputs:
      sha: ${{steps.get-params.outputs.sha}}
      tag: ${{steps.get-params.outputs.tag}}
    steps:
      - id: get-params
        name: Get Push Tag Params
        shell: bash
        run: |
          echo "sha=${GITHUB_SHA}" >> "$GITHUB_OUTPUT"
          echo "tag=${GITHUB_REF_NAME}" >> "$GITHUB_OUTPUT"

  # get the sha and tag from repo (workflow dispatch action)
  get-dispatch-params:
    uses: frederickcwong/gh-workflows/.github/workflows/repo-get-latest-tag.yml@main
    with:
      ref: "${{inputs.ref}}"

  # get the sha and tag from repo using main branch (schedule run)
  # "main" is the release branch
  get-schedule-params:
    uses: frederickcwong/gh-workflows/.github/workflows/repo-get-latest-tag.yml@main
    with:
      ref: "main"

  # IMPORTANT NOTE
  #
  # there is an issue with the "needs" logic
  # "needs" is a logical AND operation, meaning it needs all jobs listed
  # if any of them failed or skipped, this job will not run.
  # ideally, we want "get-dispatch-params" runs only when it is a dispatch
  # event, etc. (this can be done by adding "if" condition in their jobs above)
  # however, adding "if" condition to the jobs will "skip" the jobs causing this
  # "get-params" job skipped.
  # There is another solution to this limitation as described in the link below
  # but it sounds like more tests/work/complications.
  # https://stackoverflow.com/questions/66343052/github-actions-or-operator-for-needs-clause
  # Hence my short-term solution is to let all of them runs, and use conditional statements
  # inside each job to determine the job's outputs.
  get-params:
    runs-on: ubuntu-latest
    needs:
      [
        get-push-params,
        get-dispatch-params,
        get-schedule-params,
        check-base-image,
      ]
    outputs:
      sha: ${{steps.get-params.outputs.sha}}
      tag: ${{steps.get-params.outputs.tag}}
      is-release: ${{steps.get-params.outputs.is-release}}
      latest: ${{steps.get-params.outputs.latest}}
      build-image: ${{steps.get-params.outputs.build-image}}
    env:
      PUSH_EVENT_SHA: ${{needs.get-push-params.outputs.sha}}
      PUSH_EVENT_TAG: ${{needs.get-push-params.outputs.tag}}
      DISPATCH_EVENT_LATEST: ${{inputs.latest}}
      DISPATCH_EVENT_SHA: ${{needs.get-dispatch-params.outputs.sha}}
      DISPATCH_EVENT_TAG: ${{needs.get-dispatch-params.outputs.tag}}
      SCHEDULE_EVENT_SHA: ${{needs.get-schedule-params.outputs.sha}}
      SCHEDULE_EVENT_TAG: ${{needs.get-schedule-params.outputs.tag}}
      SCHEDULE_EVENT_NEED_UPDATE: ${{needs.check-base-image.outputs.need-update}}
    steps:
      - id: get-params
        shell: bash
        run: |
          # shell script to generate build parameters

          # determine if the git tag is a release tag
          function isRelease() {
            [[ $1 =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]] && echo 'true' || echo 'false'
          }

          # sanitize git tag to satisfy docker requirements
          function sanitizeTag() {
            # replace empty tag with 'no-tag'
            # insert '_' to tag that starts with '-'
            # insert '_' to tag that starts with '.'
            # replace all non-valid characters with '-'
            # and limit number of characters to 128
            result=$(echo $1 | sed         \
              -e 's/^$/no-tag/'            \
              -e 's/^\(\-\)/_\1/'          \
              -e 's/^\(\.\)/_\1/'          \
              -e 's/[^a-zA-Z0-9\-_\.]/-/g' \
            | cut -c 1-128)
            echo $result
          }

          # push tag
          #
          # assume tag push event is always a release event if the tag is in
          # semver format, which will also tag the image with latest tag
          #
          # docker image tags:
          #   - "<tag>-YYYY-MM-DD" (semver format)
          #   - "latest" (semver format)
          #   - "<tag>" (not semver format)
          if [[ ${GITHUB_EVENT_NAME}  == 'push' ]]; then

            sha=${PUSH_EVENT_SHA}
            tag=$(sanitizeTag "${PUSH_EVENT_TAG}")
            is_release=$(isRelease $tag)
            latest=${is_release}
            build_image='true'

          # workflow dispatch
          #
          # if user did not request "latest", the image will not be tagged with "latest" tag
          # if user requested "latest", the image will be tagged only if the tag is in semver format
          #
          # docker image tags:
          #   - "<tag>-YYYY-MM-DD" (semver format)
          #   - "latest" (semver format && latest requested)
          #   - "<tag>" (not semver format)
          elif [[ ${GITHUB_EVENT_NAME} == 'workflow_dispatch' ]]; then

            sha=${DISPATCH_EVENT_SHA}
            tag=$(sanitizeTag "${DISPATCH_EVENT_TAG}")
            is_release=$(isRelease $tag)
            latest=$([[ ${DISPATCH_EVENT_LATEST} == 'true' && ($is_release == 'true') ]] && echo 'true' || echo 'false')
            build_image="true"

          # schedule
          #
          # its purpose is to update the base image periodically and it is intended for the "latest" release
          # therefore, if the latest tag in the mainline is a semver, build and update the latest tag
          # otherwise, it should skip the latest tag
          #
          # docker image tags:
          #   - "<tag>-YYYY-MM-DD" (semver format)
          #   - "latest" (semver)
          else

            sha=${SCHEDULE_EVENT_SHA}
            tag=$(sanitizeTag "${SCHEDULE_EVENT_TAG}")
            is_release=$(isRelease $tag)
            latest=$([[ $is_release == 'true' ]] && echo 'true' || echo 'false')
            build_image=$([[ ${SCHEDULE_EVENT_NEED_UPDATE} == 'true' \
              && $is_release == 'true' ]] && echo 'true' || echo 'false')

          fi

          m_title="Build: ${GITHUB_REPOSITORY}@${tag}"

          if [[ ${GITHUB_EVENT_NAME} == 'schedule' && ${is_release} == 'false' ]]; then
            # no space in front of EOF, otherwise it will not find EOF
            m_body=$(cat <<EOF
          WARNING: Schedule event encountered a non-semver tag!
          EOF
            )
          else
            m_body=''
          fi

          m_body=$(cat <<EOF
          ${m_body}
          event-type:    ${GITHUB_EVENT_NAME}
          build-image:   ${build_image}
          tag:           ${tag}
          sha:           ${sha}
          is-release:    ${is_release}
          need-latest:   ${latest}
          EOF
          )

          echo "sha=${sha}" >> "$GITHUB_OUTPUT"
          echo "tag=${tag}" >> "$GITHUB_OUTPUT"
          echo "is-release=${is_release}" >> "$GITHUB_OUTPUT"
          echo "latest=${latest}" >> "$GITHUB_OUTPUT"
          echo "build-image=${build_image}" >> "$GITHUB_OUTPUT"
          echo "shoutrrr-title=$m_title" >> "$GITHUB_OUTPUT"

          # output does not accept multi-line string, use env instead
          echo "shoutrrr_body<<EOF" >> "$GITHUB_ENV"
          echo "$m_body" >> "$GITHUB_ENV"
          echo "EOF" >> "$GITHUB_ENV"

      # IMPORTANT NOTE: Secrets cannot be used in "if" condition
      # Workaround from GH doc - put secret into env and use it
      # in the "if" condition
      - uses: containrrr/shoutrrr-action@v1
        env:
          Shoutrrr_URL: ${{secrets.SHOUTRRR_URL}}
        if: ${{ env.Shoutrrr_URL != '' }}
        with:
          url: ${{secrets.SHOUTRRR_URL}}
          title: ${{steps.get-params.outputs.shoutrrr-title}}
          message: ${{env.shoutrrr_body}}

  # build the image with tags based on tag is in semver format or not
  build:
    needs: [get-params]
    if: ${{needs.get-params.outputs.build-image == 'true'}}
    uses: frederickcwong/gh-workflows/.github/workflows/docker-build-and-push.yml@main
    secrets:
      username: ${{secrets.DOCKER_USERNAME}}
      password: ${{secrets.DOCKER_PASSWORD}}
    with:
      ref: ${{needs.get-params.outputs.sha}}
      org: frederickwong
      image: route53-ddns-client
      platforms: linux/amd64
      build-args: |
        VERSION=${{needs.get-params.outputs.tag}}
      base-tag: ${{needs.get-params.outputs.tag}}
      need-latest: ${{needs.get-params.outputs.latest == 'true'}}
      need-build-date: ${{needs.get-params.outputs.is-release == 'true'}}
      build-date-tz: America/Los_Angeles
